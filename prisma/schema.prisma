generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  googleId          String          @unique
  name              String
  email             String          @unique
  avatarUrl         String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  createdGroups     Group[]         @relation("GroupCreator")
  memberOfGroups    Group[]         @relation("GroupMembers", fields: [groupIds], references: [id])
  groupIds          String[]        @db.ObjectId
  joinRequests      JoinRequest[]   @relation("UserJoinRequests")
  messages          Message[]      
  files             File[]
}

model Group {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  code          String        @unique
  creatorId     String        @db.ObjectId
  creator       User          @relation("GroupCreator", fields: [creatorId], references: [id])
  members       User[]        @relation("GroupMembers", fields: [memberIds], references: [id])
  memberIds     String[]      @db.ObjectId
  joinRequests  JoinRequest[] @relation("GroupJoinRequests")
  messages      Message[]     
  files         File[]        
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model JoinRequest {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String          @db.ObjectId
  groupId   String          @db.ObjectId
  status    String          @default("PENDING")
  createdAt DateTime        @default(now())
  user      User            @relation("UserJoinRequests", fields: [userId], references: [id], onDelete: Cascade)
  group     Group           @relation("GroupJoinRequests", fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model Message {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String    @db.ObjectId
  groupId   String    @db.ObjectId
  fileId    String?   @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  file      File?     @relation(fields: [fileId], references: [id])
  createdAt DateTime  @default(now())

  @@index([groupId, createdAt])
}

model File {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  url         String
  userId      String    @db.ObjectId
  groupId     String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  messages    Message[]
  createdAt   DateTime  @default(now())

  @@index([groupId])
}
